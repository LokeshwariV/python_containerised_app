name: Infrastructure Provision and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  plan:
    name: Plan Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -out=tfplan

      - name: Save Terraform Plan
        uses: actions/upload-artifact@v2
        with:
          name: terraform-plan
          path: tfplan

  apply:
    name: Apply Infrastructure
    runs-on: ubuntu-latest
    needs: plan
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.5

      - name: Auth ECR
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v2
        with:
          name: terraform-plan
          path: .

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

      - name: Upload Terraform state file
        uses: actions/upload-artifact@v2
        with:
          name: terraform-state
          path: terraform.tfstate

      - name: Output EC2 Public IP
        id: output
        run: echo "EC2_PUBLIC_IP=$(terraform output -raw ec2_public_ip)" >> $GITHUB_ENV

  deploy:
    name: Deploy Application with Chef
    runs-on: ubuntu-latest
    needs: apply
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Wait for SSH to be ready
        run: sleep 60

      - name: SSH into the VM and run Chef Policyfile/Cookbook
        run: |
          ssh -o StrictHostKeyChecking=no -i <private_key> ubuntu@${{ env.EC2_PUBLIC_IP }} << 'EOF'
            sudo chef-client -o'
          EOF
        env:
          CHEF_LICENSE: accept